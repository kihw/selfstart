services:
  # Caddy - Reverse Proxy avec HTTPS automatique
  caddy:
    image: caddy:2-alpine
    container_name: selfstart-caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - BASE_DOMAIN=${BASE_DOMAIN:-localhost}
    networks:
      - selfstart-network
    depends_on:
      - backend-api
      - frontend-loader
    healthcheck:
      test: ["CMD", "caddy", "version"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API - FastAPI pour la gestion Docker
  backend-api:
    build: ./backend-api
    container_name: selfstart-backend
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - STARTUP_TIMEOUT=${STARTUP_TIMEOUT:-120}
      - PYTHONUNBUFFERED=1
    networks:
      - selfstart-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s

  # Frontend Loader - Interface React de chargement
  frontend-loader:
    build: ./frontend-loader
    container_name: selfstart-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - VITE_API_URL=http://backend-api:8000
      - VITE_POLLING_INTERVAL=${POLLING_INTERVAL:-2000}
    networks:
      - selfstart-network
    depends_on:
      - backend-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Dashboard d'administration
  frontend-dashboard:
    build: ./frontend-dashboard
    container_name: selfstart-dashboard
    restart: unless-stopped
    ports:
      - "${DASHBOARD_PORT:-3001}:3000"
    environment:
      - VITE_API_URL=http://backend-api:8000
      - VITE_POLLING_INTERVAL=${POLLING_INTERVAL:-2000}
    networks:
      - selfstart-network
    depends_on:
      - backend-api
    profiles: ["dashboard"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Volumes pour la persistance des données
volumes:
  caddy_data:
    driver: local
  caddy_config:
    driver: local

# Réseau pour la communication entre services
networks:
  selfstart-network:
    driver: bridge
    name: selfstart-network
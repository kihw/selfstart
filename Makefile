# Makefile pour SelfStart
# Simplifie les op√©rations courantes de d√©veloppement et de d√©ploiement

.PHONY: help install start stop restart status logs clean build update apps network-test

# Variables
COMPOSE_FILE = docker-compose.yml
APPS_COMPOSE_FILE = examples/docker-compose.apps.yml
PROJECT_NAME = selfstart

# Couleurs pour les messages
GREEN = \033[0;32m
YELLOW = \033[1;33m
NC = \033[0m # No Color

# Fonction pour d√©tecter Docker Compose
DOCKER_COMPOSE_CMD := $(shell \
	if command -v docker-compose >/dev/null 2>&1; then \
		echo "docker-compose"; \
	elif docker compose version >/dev/null 2>&1; then \
		echo "docker compose"; \
	else \
		echo ""; \
	fi \
)

# V√©rifier que Docker Compose est disponible
check-docker-compose:
	@if [ -z "$(DOCKER_COMPOSE_CMD)" ]; then \
		echo "$(YELLOW)‚ùå Docker Compose n'est pas disponible$(NC)"; \
		echo "$(YELLOW)Pour installer Docker Compose:$(NC)"; \
		echo "  - Ubuntu/Debian: sudo apt-get install docker-compose-plugin"; \
		echo "  - RHEL/CentOS: sudo yum install docker-compose-plugin"; \
		echo "  - Ou suivez la documentation officielle Docker"; \
		exit 1; \
	fi

help: ## Affiche l'aide
	@echo "$(GREEN)SelfStart - Commandes disponibles:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""

install: ## Installation initiale avec configuration automatique
	@echo "$(GREEN)üöÄ Installation de SelfStart...$(NC)"
	@chmod +x start.sh
	@./start.sh

start: check-docker-compose ## D√©marre tous les services SelfStart
	@echo "$(GREEN)‚ñ∂Ô∏è  D√©marrage des services SelfStart...$(NC)"
	@$(DOCKER_COMPOSE_CMD) up -d
	@echo "$(GREEN)‚úÖ Services d√©marr√©s$(NC)"

stop: check-docker-compose ## Arr√™te tous les services
	@echo "$(YELLOW)‚èπÔ∏è  Arr√™t des services...$(NC)"
	@$(DOCKER_COMPOSE_CMD) down
	@echo "$(GREEN)‚úÖ Services arr√™t√©s$(NC)"

restart: check-docker-compose ## Red√©marre tous les services
	@echo "$(YELLOW)üîÑ Red√©marrage des services...$(NC)"
	@$(DOCKER_COMPOSE_CMD) restart
	@echo "$(GREEN)‚úÖ Services red√©marr√©s$(NC)"

status: check-docker-compose ## Affiche l'√©tat des services
	@echo "$(GREEN)üìä √âtat des services:$(NC)"
	@$(DOCKER_COMPOSE_CMD) ps

logs: check-docker-compose ## Affiche les logs en temps r√©el
	@echo "$(GREEN)üìã Logs des services (Ctrl+C pour quitter):$(NC)"
	@$(DOCKER_COMPOSE_CMD) logs -f

build: check-docker-compose ## Reconstruit les images Docker
	@echo "$(GREEN)üî® Construction des images...$(NC)"
	@$(DOCKER_COMPOSE_CMD) build --no-cache
	@echo "$(GREEN)‚úÖ Images construites$(NC)"

rebuild: stop build start ## Arr√™te, reconstruit et red√©marre tout

update: check-docker-compose ## Met √† jour le projet depuis Git et red√©marre
	@echo "$(GREEN)üì• Mise √† jour du projet...$(NC)"
	@git pull
	@$(DOCKER_COMPOSE_CMD) down
	@$(DOCKER_COMPOSE_CMD) build --no-cache
	@$(DOCKER_COMPOSE_CMD) up -d
	@echo "$(GREEN)‚úÖ Mise √† jour termin√©e$(NC)"

apps: check-docker-compose ## D√©marre les applications d'exemple (Sonarr, Radarr, etc.)
	@echo "$(GREEN)üé¨ D√©marrage des applications d'exemple...$(NC)"
	@$(DOCKER_COMPOSE_CMD) -f $(COMPOSE_FILE) -f $(APPS_COMPOSE_FILE) --profile apps up -d
	@echo "$(GREEN)‚úÖ Applications d'exemple d√©marr√©es$(NC)"

apps-stop: check-docker-compose ## Arr√™te les applications d'exemple
	@echo "$(YELLOW)‚èπÔ∏è  Arr√™t des applications d'exemple...$(NC)"
	@$(DOCKER_COMPOSE_CMD) -f $(COMPOSE_FILE) -f $(APPS_COMPOSE_FILE) --profile apps down
	@echo "$(GREEN)‚úÖ Applications d'exemple arr√™t√©es$(NC)"

dashboard: check-docker-compose ## D√©marre le dashboard d'administration
	@echo "$(GREEN)üéõÔ∏è  D√©marrage du dashboard...$(NC)"
	@$(DOCKER_COMPOSE_CMD) --profile dashboard up -d
	@echo "$(GREEN)‚úÖ Dashboard disponible sur http://localhost:3001$(NC)"

dashboard-build: check-docker-compose ## Reconstruit le dashboard
	@echo "$(GREEN)üî® Construction du dashboard...$(NC)"
	@$(DOCKER_COMPOSE_CMD) build frontend-dashboard
	@echo "$(GREEN)‚úÖ Dashboard reconstruit$(NC)"

dashboard-logs: check-docker-compose ## Affiche les logs du dashboard
	@$(DOCKER_COMPOSE_CMD) logs -f frontend-dashboard

dashboard-stop: check-docker-compose ## Arr√™te le dashboard
	@$(DOCKER_COMPOSE_CMD) --profile dashboard down

clean: ## Nettoie les ressources Docker inutilis√©es
	@echo "$(YELLOW)üßπ Nettoyage des ressources Docker...$(NC)"
	@docker system prune -f
	@docker volume prune -f
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

clean-all: check-docker-compose ## Supprime TOUT (containers, images, volumes, r√©seaux)
	@echo "$(YELLOW)‚ö†Ô∏è  ATTENTION: Cette action supprime TOUTES les donn√©es!$(NC)"
	@echo "$(YELLOW)Appuyez sur Ctrl+C pour annuler, ou Entr√©e pour continuer...$(NC)"
	@read
	@$(DOCKER_COMPOSE_CMD) -f $(COMPOSE_FILE) -f $(APPS_COMPOSE_FILE) down -v --remove-orphans
	@docker system prune -a -f --volumes
	@echo "$(GREEN)‚úÖ Suppression compl√®te termin√©e$(NC)"

dev: check-docker-compose ## Mode d√©veloppement avec rechargement automatique
	@echo "$(GREEN)üõ†Ô∏è  Mode d√©veloppement...$(NC)"
	@$(DOCKER_COMPOSE_CMD) -f $(COMPOSE_FILE) -f docker-compose.dev.yml up --build

backup: check-docker-compose ## Sauvegarde les volumes et la configuration
	@echo "$(GREEN)üíæ Sauvegarde en cours...$(NC)"
	@mkdir -p backups
	@docker run --rm -v selfstart_caddy_data:/data -v $(PWD)/backups:/backup alpine tar czf /backup/caddy_data_$(shell date +%Y%m%d_%H%M%S).tar.gz -C /data .
	@cp .env backups/env_$(shell date +%Y%m%d_%H%M%S).backup 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Sauvegarde termin√©e dans ./backups/$(NC)"

test: check-docker-compose ## Lance les tests (API et frontend)
	@echo "$(GREEN)üß™ Lancement des tests...$(NC)"
	@$(DOCKER_COMPOSE_CMD) exec backend-api python -m pytest tests/ || echo "Pas de tests backend configur√©s"
	@$(DOCKER_COMPOSE_CMD) exec frontend-loader npm test || echo "Pas de tests frontend configur√©s"

shell-backend: check-docker-compose ## Ouvre un shell dans le container backend
	@$(DOCKER_COMPOSE_CMD) exec backend-api /bin/bash

shell-frontend: check-docker-compose ## Ouvre un shell dans le container frontend
	@$(DOCKER_COMPOSE_CMD) exec frontend-loader /bin/sh

api-docs: ## Ouvre la documentation de l'API
	@echo "$(GREEN)üìö Documentation API disponible sur:$(NC)"
	@echo "  http://localhost:8000/docs"
	@echo "  http://localhost:8000/redoc"

monitor: ## Affiche les ressources utilis√©es par les containers
	@echo "$(GREEN)üìà Monitoring des ressources:$(NC)"
	@docker stats

check-health: ## V√©rifie la sant√© des services
	@echo "$(GREEN)üè• V√©rification de la sant√© des services:$(NC)"
	@echo "Backend API:"
	@curl -f http://localhost:8000/health 2>/dev/null && echo "  ‚úÖ Backend OK" || echo "  ‚ùå Backend KO"
	@echo "Frontend:"
	@curl -f http://localhost:3000 2>/dev/null && echo "  ‚úÖ Frontend OK" || echo "  ‚ùå Frontend KO"

network: ## Affiche les informations r√©seau
	@echo "$(GREEN)üåê Informations r√©seau:$(NC)"
	@docker network ls | grep selfstart
	@echo ""
	@docker network inspect selfstart-network | grep -E '"Name"|"IPv4Address"'

network-test: ## Lance le diagnostic r√©seau complet
	@echo "$(GREEN)üîç Diagnostic r√©seau complet...$(NC)"
	@chmod +x network-test.sh
	@./network-test.sh

network-create: ## Cr√©e le r√©seau SelfStart
	@echo "$(GREEN)üåê Cr√©ation du r√©seau SelfStart...$(NC)"
	@docker network create selfstart-network 2>/dev/null || echo "R√©seau d√©j√† existant"
	@echo "$(GREEN)‚úÖ R√©seau pr√™t$(NC)"

volumes: ## Affiche les volumes Docker
	@echo "$(GREEN)üíΩ Volumes Docker:$(NC)"
	@docker volume ls | grep selfstart

env-check: ## V√©rifie la configuration .env
	@echo "$(GREEN)‚öôÔ∏è  V√©rification de la configuration:$(NC)"
	@if [ -f .env ]; then \
		echo "  ‚úÖ Fichier .env pr√©sent"; \
		echo "  Domaine configur√©: $$(grep BASE_DOMAIN .env | cut -d'=' -f2)"; \
	else \
		echo "  ‚ùå Fichier .env manquant - Lancez 'make install'"; \
	fi

# R√®gles pour les diff√©rents environnements
prod: check-docker-compose ## D√©ploiement en production
	@echo "$(GREEN)üöÄ D√©ploiement en production...$(NC)"
	@$(DOCKER_COMPOSE_CMD) -f $(COMPOSE_FILE) -f docker-compose.prod.yml up -d
	@echo "$(GREEN)‚úÖ D√©ploiement en production termin√©$(NC)"

staging: check-docker-compose ## D√©ploiement en staging
	@echo "$(GREEN)üß™ D√©ploiement en staging...$(NC)"
	@$(DOCKER_COMPOSE_CMD) -f $(COMPOSE_FILE) -f docker-compose.staging.yml up -d
	@echo "$(GREEN)‚úÖ D√©ploiement en staging termin√©$(NC)"

# Gestion des certificats SSL (pour la production)
ssl-cert: ## G√©n√®re des certificats SSL de test
	@echo "$(GREEN)üîí G√©n√©ration de certificats SSL de test...$(NC)"
	@mkdir -p ssl
	@openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
		-keyout ssl/selfstart.key -out ssl/selfstart.crt \
		-subj "/C=FR/ST=State/L=City/O=SelfStart/CN=localhost"
	@echo "$(GREEN)‚úÖ Certificats g√©n√©r√©s dans ./ssl/$(NC)"

# Raccourcis pour les d√©veloppeurs
quick-start: network-create start ## D√©marrage rapide (r√©seau + services)

full-start: network-create start apps dashboard ## D√©marrage complet avec tout

quick-test: start check-health network-test ## Test rapide apr√®s d√©marrage

# Affichage par d√©faut
.DEFAULT_GOAL := help
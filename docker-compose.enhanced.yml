# Docker Compose Enhanced pour SelfStart
# Architecture avancée avec orchestration et load balancing

version: '3.8'

services:
  # =============================================
  # INFRASTRUCTURE CORE
  # =============================================
  
  # Redis - Cache et coordination
  redis:
    image: redis:7-alpine
    container_name: selfstart-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    networks:
      - selfstart-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "selfstart.enable=true"
      - "selfstart.type=cache"
      - "selfstart.critical=true"

  # Caddy Enhanced - Reverse proxy intelligent
  caddy:
    image: caddy:2-alpine
    container_name: selfstart-caddy-enhanced
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile.enhanced:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
    environment:
      - BASE_DOMAIN=${BASE_DOMAIN:-localhost}
      - ENABLE_BASIC_AUTH=${ENABLE_BASIC_AUTH:-false}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD_HASH=${ADMIN_PASSWORD_HASH:-}
    networks:
      - selfstart-network
    depends_on:
      - backend-api-enhanced
      - frontend-loader
    healthcheck:
      test: ["CMD", "caddy", "version"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "selfstart.enable=true"
      - "selfstart.type=proxy"
      - "selfstart.critical=true"

  # =============================================
  # BACKEND ENHANCED
  # =============================================

  # Backend API Enhanced - Instance principale
  backend-api-enhanced:
    build: 
      context: ./backend-api
      dockerfile: Dockerfile
    container_name: selfstart-backend-enhanced
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data:/app/data
    environment:
      - STARTUP_TIMEOUT=${STARTUP_TIMEOUT:-120}
      - PYTHONUNBUFFERED=1
      - REDIS_URL=redis://redis:6379
      - API_VERSION=1.5.0
      - ENHANCED_MODE=true
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - selfstart-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    labels:
      - "selfstart.enable=true"
      - "selfstart.type=api"
      - "selfstart.critical=true"
      - "selfstart.version=1.5.0"

  # Backend API Enhanced - Instance secondaire (load balancing)
  backend-api-enhanced-2:
    build: 
      context: ./backend-api
      dockerfile: Dockerfile
    container_name: selfstart-backend-enhanced-2
    restart: unless-stopped
    ports:
      - "${API_PORT_2:-8001}:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data:/app/data
    environment:
      - STARTUP_TIMEOUT=${STARTUP_TIMEOUT:-120}
      - PYTHONUNBUFFERED=1
      - REDIS_URL=redis://redis:6379
      - API_VERSION=1.5.0
      - ENHANCED_MODE=true
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - INSTANCE_ID=2
    networks:
      - selfstart-network
    depends_on:
      - redis
    profiles: ["ha"]  # High Availability profile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    labels:
      - "selfstart.enable=true"
      - "selfstart.type=api"
      - "selfstart.instance=2"

  # =============================================
  # FRONTEND ENHANCED
  # =============================================

  # Frontend Loader - Instance principale
  frontend-loader:
    build: ./frontend-loader
    container_name: selfstart-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - VITE_API_URL=http://backend-api-enhanced:8000
      - VITE_WS_URL=ws://backend-api-enhanced:8000/ws
      - VITE_POLLING_INTERVAL=${POLLING_INTERVAL:-2000}
      - VITE_ENHANCED_MODE=true
    networks:
      - selfstart-network
    depends_on:
      - backend-api-enhanced
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "selfstart.enable=true"
      - "selfstart.type=frontend"

  # Frontend Loader - Instance secondaire (load balancing)
  frontend-loader-2:
    build: ./frontend-loader
    container_name: selfstart-frontend-2
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT_2:-3001}:3000"
    environment:
      - VITE_API_URL=http://backend-api-enhanced:8000
      - VITE_WS_URL=ws://backend-api-enhanced:8000/ws
      - VITE_POLLING_INTERVAL=${POLLING_INTERVAL:-2000}
      - VITE_ENHANCED_MODE=true
      - INSTANCE_ID=2
    networks:
      - selfstart-network
    depends_on:
      - backend-api-enhanced
    profiles: ["ha"]  # High Availability profile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "selfstart.enable=true"
      - "selfstart.type=frontend"
      - "selfstart.instance=2"

  # Dashboard Enhanced
  frontend-dashboard:
    build: ./frontend-dashboard
    container_name: selfstart-dashboard-enhanced
    restart: unless-stopped
    ports:
      - "${DASHBOARD_PORT:-3001}:3000"
    environment:
      - VITE_API_URL=http://backend-api-enhanced:8000
      - VITE_WS_URL=ws://backend-api-enhanced:8000/ws
      - VITE_POLLING_INTERVAL=${POLLING_INTERVAL:-2000}
      - VITE_ENHANCED_MODE=true
    networks:
      - selfstart-network
    depends_on:
      - backend-api-enhanced
    profiles: ["dashboard"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "selfstart.enable=true"
      - "selfstart.type=dashboard"

  # =============================================
  # MONITORING & OBSERVABILITY
  # =============================================

  # Prometheus - Métriques
  prometheus:
    image: prom/prometheus:latest
    container_name: selfstart-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - selfstart-network
    profiles: ["monitoring"]
    labels:
      - "selfstart.enable=true"
      - "selfstart.type=monitoring"

  # Grafana - Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: selfstart-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3002}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - selfstart-network
    depends_on:
      - prometheus
    profiles: ["monitoring"]
    labels:
      - "selfstart.enable=true"
      - "selfstart.type=monitoring"

  # =============================================
  # LOAD BALANCER (HAProxy alternative)
  # =============================================

  # HAProxy pour load balancing avancé
  haproxy:
    image: haproxy:2.8-alpine
    container_name: selfstart-haproxy
    restart: unless-stopped
    ports:
      - "${HAPROXY_PORT:-8080}:80"
      - "${HAPROXY_STATS_PORT:-8404}:8404"
    volumes:
      - ./config/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      - selfstart-network
    depends_on:
      - backend-api-enhanced
      - backend-api-enhanced-2
    profiles: ["ha", "loadbalancer"]
    healthcheck:
      test: ["CMD", "haproxy", "-c", "-f", "/usr/local/etc/haproxy/haproxy.cfg"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "selfstart.enable=true"
      - "selfstart.type=loadbalancer"

# =============================================
# VOLUMES PERSISTANTS
# =============================================

volumes:
  # Infrastructure
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  caddy_logs:
    driver: local
  redis_data:
    driver: local
  
  # Monitoring
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================
# RÉSEAUX
# =============================================

networks:
  selfstart-network:
    driver: bridge
    name: selfstart-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# =============================================
# CONFIGURATION AVANCÉE
# =============================================

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-restart-policy: &restart-policy
  restart_policy:
    condition: unless-stopped
    delay: 5s
    max_attempts: 3
    window: 120s

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s
# Configuration Caddy pour SelfStart
# Reverse proxy intelligent avec démarrage automatique de containers

# Configuration globale
{
    # Désactiver les logs admin pour la sécurité
    admin off
    
    # Configuration automatique HTTPS
    email admin@{$BASE_DOMAIN}
    
    # Optimisations de performance
    servers {
        protocols h1 h2 h3
    }
}

# Route principale - Exemple avec Sonarr
sonarr.{$BASE_DOMAIN} {
    # Matcher pour vérifier si le container est en cours d'exécution
    @running `curl -sf http://backend-api:8000/api/status?name=sonarr | jq -r '.status' | grep -q running`
    
    # Si le container est en cours d'exécution, rediriger vers lui
    handle @running {
        reverse_proxy sonarr:8989 {
            # Headers pour préserver l'IP client
            header_up Host {host}
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
            header_up X-Forwarded-Proto {scheme}
            
            # Timeout augmenté pour les applications lentes
            timeout 30s
        }
    }
    
    # Sinon, afficher l'interface de chargement
    handle {
        reverse_proxy frontend-loader:3000 {
            header_up X-Container-Name sonarr
            header_up X-Container-Port 8989
            header_up Host {host}
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
            header_up X-Forwarded-Proto {scheme}
        }
    }
    
    # Logs pour debugging
    log {
        output file /var/log/caddy/sonarr.log
        level INFO
    }
}

# Route pour Radarr
radarr.{$BASE_DOMAIN} {
    @running `curl -sf http://backend-api:8000/api/status?name=radarr | jq -r '.status' | grep -q running`
    
    handle @running {
        reverse_proxy radarr:7878 {
            header_up Host {host}
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
            header_up X-Forwarded-Proto {scheme}
            timeout 30s
        }
    }
    
    handle {
        reverse_proxy frontend-loader:3000 {
            header_up X-Container-Name radarr
            header_up X-Container-Port 7878
        }
    }
}

# Route pour Jellyfin
jellyfin.{$BASE_DOMAIN} {
    @running `curl -sf http://backend-api:8000/api/status?name=jellyfin | jq -r '.status' | grep -q running`
    
    handle @running {
        reverse_proxy jellyfin:8096 {
            header_up Host {host}
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
            header_up X-Forwarded-Proto {scheme}
            timeout 30s
        }
    }
    
    handle {
        reverse_proxy frontend-loader:3000 {
            header_up X-Container-Name jellyfin
            header_up X-Container-Port 8096
        }
    }
}

# Route pour Bazarr
bazarr.{$BASE_DOMAIN} {
    @running `curl -sf http://backend-api:8000/api/status?name=bazarr | jq -r '.status' | grep -q running`
    
    handle @running {
        reverse_proxy bazarr:6767 {
            header_up Host {host}
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
            header_up X-Forwarded-Proto {scheme}
            timeout 30s
        }
    }
    
    handle {
        reverse_proxy frontend-loader:3000 {
            header_up X-Container-Name bazarr
            header_up X-Container-Port 6767
        }
    }
}

# Route pour Prowlarr
prowlarr.{$BASE_DOMAIN} {
    @running `curl -sf http://backend-api:8000/api/status?name=prowlarr | jq -r '.status' | grep -q running`
    
    handle @running {
        reverse_proxy prowlarr:9696 {
            header_up Host {host}
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
            header_up X-Forwarded-Proto {scheme}
            timeout 30s
        }
    }
    
    handle {
        reverse_proxy frontend-loader:3000 {
            header_up X-Container-Name prowlarr
            header_up X-Container-Port 9696
        }
    }
}

# Route pour Nextcloud
nextcloud.{$BASE_DOMAIN} {
    @running `curl -sf http://backend-api:8000/api/status?name=nextcloud | jq -r '.status' | grep -q running`
    
    handle @running {
        reverse_proxy nextcloud:80 {
            header_up Host {host}
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
            header_up X-Forwarded-Proto {scheme}
            timeout 30s
        }
    }
    
    handle {
        reverse_proxy frontend-loader:3000 {
            header_up X-Container-Name nextcloud
            header_up X-Container-Port 8080
        }
    }
}

# Route pour Portainer
portainer.{$BASE_DOMAIN} {
    @running `curl -sf http://backend-api:8000/api/status?name=portainer | jq -r '.status' | grep -q running`
    
    handle @running {
        reverse_proxy portainer:9000 {
            header_up Host {host}
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
            header_up X-Forwarded-Proto {scheme}
            timeout 30s
        }
    }
    
    handle {
        reverse_proxy frontend-loader:3000 {
            header_up X-Container-Name portainer
            header_up X-Container-Port 9000
        }
    }
}

# Route pour Plex (port spécial 32400)
plex.{$BASE_DOMAIN} {
    @running `curl -sf http://backend-api:8000/api/status?name=plex | jq -r '.status' | grep -q running`
    
    handle @running {
        reverse_proxy plex:32400 {
            header_up Host {host}
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-For {remote_host}
            header_up X-Forwarded-Proto {scheme}
            timeout 30s
        }
    }
    
    handle {
        reverse_proxy frontend-loader:3000 {
            header_up X-Container-Name plex
            header_up X-Container-Port 32400
        }
    }
}

# Configuration pour le développement local (localhost)
localhost:8080 {
    # API backend accessible directement
    handle /api/* {
        reverse_proxy backend-api:8000
    }
    
    # Interface frontend
    handle {
        reverse_proxy frontend-loader:3000
    }
}

# Interface d'administration SelfStart (optionnelle)
admin.{$BASE_DOMAIN} {
    reverse_proxy frontend-loader:3000 {
        header_up X-Admin-Mode true
    }
    
    # Authentification basique (à personnaliser)
    basicauth {
        admin $2a$14$Zkx19XLiW6VYouLHR5NmfOFU0z2GTNOWNvhHn.b6jCa7Jb.0Kfxh2
    }
}

# Gestion des erreurs globales
handle_errors {
    @404 expression `{http.error.status_code} == 404`
    handle @404 {
        respond "Service non disponible - Vérifiez la configuration SelfStart" 404
    }
    
    @500 expression `{http.error.status_code} >= 500`
    handle @500 {
        respond "Erreur serveur - Contactez l'administrateur" 500
    }
}

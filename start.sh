#!/bin/bash

# Script de d√©marrage rapide pour SelfStart
# Ce script configure et d√©marre automatiquement SelfStart

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher des messages color√©s
print_message() {
    echo -e "${GREEN}[SelfStart]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[SelfStart]${NC} $1"
}

print_error() {
    echo -e "${RED}[SelfStart]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[SelfStart]${NC} $1"
}

# Banner
echo -e "${BLUE}"
echo "  ____       _  __   ____  _             _   "
echo " / ___|  ___| |/ _| / ___|| |_ __ _ _ __| |_ "
echo " \___ \ / _ \ | |_  \___ \| __/ _\` | '__| __|"
echo "  ___) |  __/ |  _|  ___) | || (_| | |  | |_ "
echo " |____/ \___|_|_|   |____/ \__\__,_|_|   \__|"
echo -e "${NC}"
echo "Syst√®me de d√©marrage automatique de containers Docker"
echo "======================================================="
echo

# V√©rification des pr√©requis
print_info "V√©rification des pr√©requis..."

# V√©rifier Docker
if ! command -v docker &> /dev/null; then
    print_error "Docker n'est pas install√©. Veuillez installer Docker d'abord."
    exit 1
fi

# V√©rifier Docker Compose
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    print_error "Docker Compose n'est pas install√©. Veuillez installer Docker Compose d'abord."
    exit 1
fi

# V√©rifier que Docker fonctionne
if ! docker ps &> /dev/null; then
    print_error "Docker n'est pas d√©marr√© ou vous n'avez pas les permissions n√©cessaires."
    print_info "Essayez: sudo systemctl start docker"
    print_info "Ou ajoutez votre utilisateur au groupe docker: sudo usermod -aG docker \$USER"
    exit 1
fi

print_message "‚úì Docker et Docker Compose sont disponibles"

# Configuration du fichier .env
if [ ! -f .env ]; then
    print_info "Cr√©ation du fichier de configuration .env..."
    
    # Demander le domaine
    echo -n "Entrez votre domaine (ou localhost pour les tests): "
    read -r domain
    domain=${domain:-localhost}
    
    # Cr√©er le fichier .env
    cp .env.example .env
    sed -i "s/BASE_DOMAIN=exemple.com/BASE_DOMAIN=$domain/" .env
    
    # G√©n√©rer une cl√© secr√®te
    if command -v openssl &> /dev/null; then
        secret_key=$(openssl rand -hex 32)
        sed -i "s/SECRET_KEY=votre_cle_secrete_ici/SECRET_KEY=$secret_key/" .env
    fi
    
    print_message "‚úì Fichier .env cr√©√© avec le domaine: $domain"
else
    print_message "‚úì Fichier .env existant d√©tect√©"
fi

# Cr√©er les r√©pertoires n√©cessaires
print_info "Cr√©ation des r√©pertoires de donn√©es..."
mkdir -p downloads media/tv media/movies media/music config
print_message "‚úì R√©pertoires cr√©√©s"

# Cr√©er le r√©seau Docker
print_info "Cr√©ation du r√©seau Docker..."
if ! docker network ls | grep -q selfstart-network; then
    docker network create selfstart-network
    print_message "‚úì R√©seau selfstart-network cr√©√©"
else
    print_message "‚úì R√©seau selfstart-network existe d√©j√†"
fi

# Arr√™ter les services existants
print_info "Arr√™t des services existants..."
docker-compose down 2>/dev/null || true

# Construire et d√©marrer les services
print_info "Construction et d√©marrage des services SelfStart..."
docker-compose up -d --build

# Attendre que les services soient pr√™ts
print_info "Attente du d√©marrage des services..."
sleep 10

# V√©rifier l'√©tat des services
print_info "V√©rification de l'√©tat des services..."

if docker-compose ps | grep -q "Up"; then
    print_message "‚úì Services SelfStart d√©marr√©s avec succ√®s!"
else
    print_error "Certains services ont √©chou√©. V√©rifiez les logs avec: docker-compose logs"
    exit 1
fi

# Afficher les informations de connexion
echo
print_message "üéâ SelfStart est maintenant op√©rationnel!"
echo
print_info "URLs d'acc√®s:"

# Lire le domaine depuis .env
domain=$(grep "BASE_DOMAIN=" .env | cut -d'=' -f2)

if [ "$domain" = "localhost" ]; then
    echo "  Interface d'administration: http://localhost:8080"
    echo "  API Backend: http://localhost:8000"
    echo "  Frontend: http://localhost:3000"
else
    echo "  Interface d'administration: https://admin.$domain"
    echo "  API Backend: http://$domain:8000"
    echo "  Exemples d'applications:"
    echo "    - Sonarr: https://sonarr.$domain"
    echo "    - Radarr: https://radarr.$domain"
    echo "    - Jellyfin: https://jellyfin.$domain"
fi

echo
print_info "Commandes utiles:"
echo "  Voir les logs:           docker-compose logs -f"
echo "  Arr√™ter les services:    docker-compose down"
echo "  Red√©marrer:              docker-compose restart"
echo "  Mettre √† jour:           git pull && docker-compose up -d --build"

echo
print_info "Pour d√©marrer des applications d'exemple:"
echo "  docker-compose -f docker-compose.yml -f examples/docker-compose.apps.yml --profile apps up -d"

echo
print_warning "Notes importantes:"
echo "  1. Pour la production, modifiez les mots de passe dans .env"
echo "  2. Configurez vos DNS pour pointer vers ce serveur"
echo "  3. Assurez-vous que les ports 80 et 443 sont ouverts"

echo
print_message "Installation termin√©e! Consultez le README.md pour plus d'informations."
